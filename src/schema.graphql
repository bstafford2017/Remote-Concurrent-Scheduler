type User {
  id: String!
  username: String!
  password: String!
  firstName: String!
  lastName: String!
  admin: Boolean!
  events: [Event]
}

type Building {
  id: String!
  name: String!
}

type Room {
  id: String!
  number: String!
  seats: Int!
  projector: Boolean!
  building: Building!
}

type Event {
  id: String!
  title: String!
  startDate: String!
  endDate: String!
  startTime: String!
  endTime: String!
  recur: Boolean!
  weekdays: [Boolean]
  room: Room!
  user: User!
}

type Query {
  selectUser(username: String!, password: String!): User
  selectUsers: [User]!
  selectBuilding(id: String!): Building
  selectBuildings: [Building]!
  selectRoom(id: String!): Room
  selectRooms: [Room]!
  selectEvent(id: String!): Event
  selectEvents: [Event]!
}

input UserInput {
  username: String!
  password: String!
  firstName: String!
  lastName: String!
  admin: Boolean!
}

input UserIDInput {
  username: String!
}

input BuildingInput {
  name: String!
}

input BuildingIDInput {
  id: String!
}

input RoomInput {
  number: String!
  seats: Int!
  projector: Boolean!
  building: BuildingIDInput!
}

input RoomIDInput {
  id: String!
}

input EventInput {
  title: String!
  startDate: String!
  endDate: String
  startTime: String!
  endTime: String!
  recur: Boolean!
  weekdays: [Boolean]
  room: RoomIDInput!
  user: UserIDInput!
}

type Mutation {
  addUser(input: UserInput): User
  updateUser(input: UserInput): User
  deleteUser(id: String!): User
  addBuilding(input: BuildingInput): Building
  updateBuilding(input: BuildingInput): Building
  deleteBuilding(id: String!): Building
  addRoom(input: RoomInput): Room
  updateRoom(input: RoomInput): Room
  deleteRoom(id: String!): Room
  addEvent(input: EventInput): Event
  updateEvent(input: EventInput): Event
  deleteEvent(id: String!): Event
}
