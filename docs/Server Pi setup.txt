SERVER PI
____________________________________________________________________
==================== Disable Screen Sleep ==========================
____________________________________________________________________
[Source] - https://www.bitpi.co/2015/02/14/prevent-raspberry-pi-from-sleeping/

lxde configuration - Xsession blanking
This method should prevent your screen saver from coming on in the GUI.

Open up your lxde autostart file:
sudo nano /etc/xdg/lxsession/LXDE/autostart

If your Pi is newer, the file you'll need to change may be:
sudo nano .config/lxsession/LXDE-pi/autostart

Add these lines:
@xset s noblank
@xset s off
@xset -dpms

____________________________________________________________________
=================== Distribution Upgrade ===========================
____________________________________________________________________
- - - - - - - - - - - - - - - - - - - - -- - - - - - - - - - - - - - - -
Before starting the distribution upgrade perform the following commands
to install libc6 ver. 2.30 beforehand. This will save you a step from
having to install it after the upgrade.

Change the first line of sources.list to:
sudo nano /etc/apt/sources.list
   	deb http://raspbian.raspberrypi.org/raspbian/ bullseye main contrib non-free rpi

sudo apt update
sudo apt install libc6 -y

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
In order to install MySQL 5.7 without any security issues the pi will
need to be upgraded to a newer raspbian distribution. To start modify
the following files and replace the distributions stretch, jessie, etc.
with buster for the first line (or the first line that does not start 
with #).

sudo nano /etc/apt/sources.list

   deb http://raspbian.raspberrypi.org/raspbian/ buster main contrib non-free rpi


sudo nano /etc/apt/sources.list.d/raspi.list

   deb http://archive.raspberrypi.org/debian/ buster main ui staging

**From this point on you will need a stable internet connection as
**this will take a fair amount of time.
sudo apt update

sudo apt dist-upgrade -y

During the upgrade you will be shown sections to read and prompts to
respond to. The first you will likely see is a changelog to read. You
can just press [Q] to close and continue the update process. Next will
be a blue screen for Samba Server Utilities. Select <yes> using the arrow
keys and press enter. Later on around 66% you will have a prompt regarding
plymouthd.conf, press [Y] and hit enter. At approximately 96% you will
recieve another prompt for lightdm.cnf. Enter [Y] for this one as well.

Once the process is finished run ~$ sudo reboot. After booting up you will
be shown a login screen. The username is 'pi' and password is 'raspberry'.
You will immediately be given a prompt about saving history which you 
should choose <no> for.

Next open the terminal and enter 
   sudo raspi-config.

Select boot-options and press enter.
Then press [enter] with option B1 selected.
In the selection menu choose the 4th option for 'Desktop Autologin'.
**This will allow the pi to automatically start up as the user 'pi'.

Lastly make sure to select <Finish> and allow it to reboot.

____________________________________________________________________
================= Running scripts on Boot ==========================
____________________________________________________________________
[Source] - https://learn.sparkfun.com/tutorials/how-to-run-a-raspberry-pi-program-on-startup/all

Unit File (GUI)
If your program requires graphical components as opposed to a command shell, 
then the following template is recommended for creating a systemd service.

#Create a new .service file in the systemd directory:
sudo nano /lib/systemd/system/server.service

#Enter the following text into the document:
[Unit]
Description=RCS Server

[Service]
Environment=DISPLAY=:0
Environment=XAUTHORITY=/home/pi/.Xauthority
ExecStart=/bin/bash /home/pi/Desktop/remote-concurrent-scheduler/server.sh 
KillMode=process
TimeoutSec=infinity

[Install]
WantedBy=graphical.target

___________________________________________________________________________________
Description can be any text you want to help you remember what this service does.
Under [Service], we specify some environment variables. We want to connect to our 
primary display (this assumes only one display is connected to our Pi), so we set 
DISPLAY to :0, and we tell our application where to find the necessary credentials 
to use the X windows system with XAUTHORITY. ExecStart is the command we want to 
run.

KillMode tells systemd to kill off any processes associated with our 
program if the service fails (or exits), and TimeoutSec=infinity means that we don't 
ever want to stop trying to execute our program.
_____________________________________________________________________________________
 

Save and exit with ctrl + x, followed by y when prompted to save, and then enter.

#Make systemd recognize the service. Rebooting also works.
sudo systemctl daemon-reload

**If the server.service file is modified, this command will have to be re-ran 
or the system must be rebooted.

#Tell systemd to start the service on boot.
sudo systemctl enable server.service

#verify that the program works
sudo reboot

_____________________________________________________________________
===================== Download RCS System ===========================
_____________________________________________________________________
[Source] - https://github.com/bstafford2017/remote-concurrent-scheduler

First test to make sure the pi has git and npm are installed.
git --version
npm --version

If either is not then run the respective commands.
sudo apt-get install git -y
sudo apt-get install npm -y

Then move to desktop and download the system repository.

  cd /home/pi/Desktop
  git clone https://github.com/bstafford2017/remote-concurrent-scheduler.git
  cd remote-concurrent-scheduler
  npm install

